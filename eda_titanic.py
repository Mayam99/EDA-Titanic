# -*- coding: utf-8 -*-
"""EDA-Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1clQt3OIfKxRUb2uFxim0WILhJNYPzhMA

##Importing Necessary Librarier
"""

import pandas as pd
import numpy as np

"""##Loading the Dataset"""

df = pd.read_csv("train.csv")

"""##Data Exploration"""

df.head()

df.tail()

df.info()

df.describe(include = "all")

"""##Checking for the null values in the Dataset"""

df.isnull().sum()

"""##Handeling the missing values"""

# Impute missing values in the 'Age' column with the mean
mean_age = df['Age'].mean()
df['Age'].fillna(mean_age, inplace=True)

"""##Visualization of the Dataset"""

import matplotlib.pyplot as plt
relevant_numerical_vars = ['Age', 'Fare']
for var in relevant_numerical_vars:
    plt.figure(figsize=(8, 6))
    plt.hist(df[var].dropna(), bins=20, color='skyblue', edgecolor='black')
    plt.title(f'Distribution of {var}', fontsize=16)
    plt.xlabel(var, fontsize=14)
    plt.ylabel('Frequency', fontsize=14)
    plt.grid(True)
    plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
relevant_numerical_vars = ['Age', 'Fare']
for var in relevant_numerical_vars:
    plt.figure(figsize=(8, 6))
    sns.boxplot(x='Survived', y=var, data=df, palette='Set2')
    plt.title(f'Box Plot of {var} by Survival', fontsize=16)
    plt.xlabel('Survived', fontsize=14)
    plt.ylabel(var, fontsize=14)
    plt.grid(True)
    plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
relevant_numerical_vars = ['Age', 'Fare']
for i in range(len(relevant_numerical_vars)):
    for j in range(i + 1, len(relevant_numerical_vars)):
        var1 = relevant_numerical_vars[i]
        var2 = relevant_numerical_vars[j]

        plt.figure(figsize=(8, 6))
        sns.scatterplot(x=var1, y=var2, data=df, hue='Survived', palette='Set1')
        plt.title(f'Scatter Plot of {var1} vs {var2} by Survival', fontsize=16)
        plt.xlabel(var1, fontsize=14)
        plt.ylabel(var2, fontsize=14)
        plt.grid(True)
        plt.legend(title='Survived', loc='upper right')
        plt.show()

"""###The loc and iloc methods in Pandas for indexing and slicing operations to extract specific subsets of data based on conditions or positions."""

subset = df.loc[df['Age'] > 30, ['Name', 'Survived']]
print(subset)

"""###Using iloc for Integer-Based Indexing:"""

subset = df.iloc[:5, :3]
print(subset)

"""###Combining Conditions:

###We can combine conditions using logical operators like & (and) and | (or).
###Example: Select rows where 'Age' is greater than 30 and 'Sex' is 'female', and select columns 'Name' and 'Survived'.
"""

subset = df.loc[(df['Age'] > 30) & (df['Sex'] == 'female'), ['Name', 'Survived']]
print(subset)

"""###Indexing by Position and Labels:

###We can also use a mix of labels and positions with iloc by passing a list of integers or labels.
###Example: Select the first 3 rows and columns 'Name' and 'Age'.
"""

subset = df.iloc[:3, df.columns.get_indexer(['Name', 'Age'])]
print(subset)

"""##Aggregation Operations:
###Compute summary statistics like mean, median, count, etc., for numerical variables.
"""

summary_stats = df.describe()
print(summary_stats)

"""###This will calculate and display summary statistics such as count, mean, standard deviation, minimum, 25th percentile (Q1), median (50th percentile), 75th percentile (Q3), and maximum for all numerical variables in the Titanic dataset.

Grouping data based on categorical variables and performing aggregations within each group is a common operation in data analysis. We can achieve this in Pandas using the groupby() function followed by aggregation functions such as sum(), mean(), median(), etc. Here's how you can do it:
"""

# Group the data based on a categorical variable (e.g., 'Pclass') and perform aggregations
grouped_data = df.groupby('Pclass').agg({
    'Survived': 'mean',   # Calculate the mean survival rate within each passenger class
    'Age': 'median',      # Calculate the median age within each passenger class
    'Fare': 'sum'         # Calculate the total fare within each passenger class
})

# Display the aggregated data
print(grouped_data)

"""##Q1) Indexing: Retrieve the details of the passenger in the 10th row
To retrieve the details of the passenger in the 10th row of the Titanic dataset, you can use the iloc method in Pandas
"""

# Retrieve the details of the passenger in the 10th row
passenger_10th_row = df.iloc[9]  # Indexing starts from 0, so 9 represents the 10th row

# Display the details of the passenger
print(passenger_10th_row)

"""##Q2) Slicing: Extract the information of passengers from the 5th to the 15th row

To extract the information of passengers from the 5th to the 15th row of the Titanic dataset, you can use slicing with iloc in Pandas.
"""

# Extract the information of passengers from the 5th to the 15th row
passengers_5th_to_15th = df.iloc[4:15]  # Rows are indexed from 0, so 4 represents the 5th row and 14 represents the 15th row

# Display the extracted information of passengers
print(passengers_5th_to_15th)

"""##Q3) loc: Retrieve the age and sex of passengers with PassengerId 100 to 150."""

# Retrieve the age and sex of passengers with PassengerId 100 to 150
passengers_100_to_150 = df.loc[99:149, ['Age', 'Sex']]

# Display the age and sex of the selected passengers
print(passengers_100_to_150)

"""##Q4)  iloc: Extract the details of passengers from the 3rd to the 6th row and the 2nd to the 4th columns."""

# Extract the details of passengers from the 3rd to the 6th row and the 2nd to the 4th columns
passenger_details = df.iloc[2:6, 1:4]  # Rows and columns are indexed starting from 0

# Display the extracted details of passengers
print(passenger_details)

"""##Q5)  Aggregation: Calculate the average fare paid by passengers.
To calculate the average fare paid by passengers in the Titanic dataset, you can use the mean() function
"""

# Calculate the average fare paid by passengers
average_fare = df['Fare'].mean()

# Display the average fare
print("Average Fare Paid by Passengers:", average_fare)

"""##Q6) Groupby: Group the data by 'Pclass' and calculate the median age for each passenger class.
###To group the data by 'Pclass' and calculate the median age for each passenger class in the Titanic dataset, we can use the groupby() function followed by the median()
"""

# Group the data by 'Pclass' and calculate the median age for each passenger class
median_age_by_class = df.groupby('Pclass')['Age'].median()

# Display the median age for each passenger class
print("Median Age by Passenger Class:")
print(median_age_by_class)

"""##Q7) Orderby: Sort the DataFrame by 'Fare' in descending order

To sort the DataFrame by the 'Fare' column in descending order, you can use the sort_values()
"""

# Sort the DataFrame by 'Fare' in descending order
sorted_df = df.sort_values(by='Fare', ascending=False)

# Display the sorted DataFrame
print(sorted_df)

"""##Q8) Indexing: Retrieve the name and ticket number of passengers who survived.
To retrieve the name and ticket number of passengers who survived, we can use boolean indexing
"""

# Retrieve the name and ticket number of passengers who survived
survived_passengers = df.loc[df['Survived'] == 1, ['Name', 'Ticket']]

# Display the names and ticket numbers of passengers who survived
print("Passengers who Survived:")
print(survived_passengers)

"""##Q9) Slicing: Extract the subset of passengers who embarked from 'C' and paid a fare greater than $50.

To extract the subset of passengers who embarked from 'C' and paid a fare greater than $50, you can use boolean indexing
"""

# Extract the subset of passengers who embarked from 'C' and paid a fare greater than $50
subset_passengers = df.loc[(df['Embarked'] == 'C') & (df['Fare'] > 50)]

# Display the subset of passengers
print("Passengers who embarked from 'C' and paid a fare greater than $50:")
print(subset_passengers)

"""##Q10) Groupby: Group the data by 'Embarked' and 'Sex', and calculate the average fare for each combination of embarkation point and gender.
To group the data by 'Embarked' and 'Sex' and calculate the average fare for each combination of embarkation point and gender, we can use the groupby() function followed by the agg() function to calculate the average fare.

"""

# Group the data by 'Embarked' and 'Sex', and calculate the average fare
avg_fare_by_embarked_sex = df.groupby(['Embarked', 'Sex'])['Fare'].mean()

# Display the average fare for each combination of embarkation point and gender
print("Average Fare by Embarked Point and Gender:")
print(avg_fare_by_embarked_sex)

